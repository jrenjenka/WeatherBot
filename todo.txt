Objectives:
1. Understand how to work with classes in Python from scratch
2. Understand how to use Twitter API and external library for that API
3. Understand how to use API without a library
4. Learn how to make http requests and handler error and responses
5. Learn how to work with json in Python
6. Understand how to represent weather data
7. Learn how to make bot more intelligence - alerts, messages, weather tips
8. Learn how to handler api request limits
9. Learn how to deploy apps and meet free limits for deploying
10. Practise git
11. Don't forget about credits!

Pseudocode:
twitbot.py
def init()
  return api
  
def main()
  api = init()
  weather = weather()
  start if 00.00:
    while True
      statuses = weather.lookup()
      for status in statuses:
        try:
          api.status_update(status)
        except error
      time.sleep(3 hours)
      
weather.py
class Weather
  def init(self, api_key)
    self.api = api_key
    param ? 
  
  def lookup():
    try:
      request = request_param
    except error
    
    json parse
    status(json_response)
    
    return list of statuses
    
  def status(json_response)
    new_list = []
    if time_current is 06.00 am:
      status = "date\n
                hourly_summary\n
                +-tempMin...+-tempMax
                ветер degree() speed м/c, порывы gust м/c
                влажность humidity %"
                hourly summary
                daily data 
      new_list(status)
      
    if time_current is 12.00 pm or 6pm:
       if monday, wednesday or friday and 12pm:
         status = "daily_summary"
       else: 
         status = "time\n
                  hourly_summary"
                  +-tempMin...+-tempMax
                  ветер degree() speed м/c, порывы gust м/c
                  влажность humidity %"
                  hourly summary
                  current data 
                  new_list(status)
       
    else: 
        status = "date\n
              summary current, +-temp, ощущается как +23, ветер degree() speed м/c, 
              порывы gust м/c, влажность humidity %"
              current_data
        new_list(status)
    
    if (isWindALert(wind_speed, wind_gust)):
        status = "Будьте осторожны, сильный ветер до speed м/c с порывами gust м/c"
        new_list(status)
    
    return new_list
    
    
degree_to_direction(degree)
  return "direction"
  
isWindAlert(wind_speed, wind_gust)
  return true/false
  of return wind status
  
  
              
    06:00GMT
Незначительный дождь, +23, ощущается как +23, ветер ССЗ 32м/c, порывы 20м/с, влажность 73%
                
                14.07
Небольшой дождь до сегодняшней ночи, начинаясь снова завтра днем.
+17..+25
Ветер ЮЮЗ 24м/с, порывы 10м/c
Влажность 79%
    

1. Bot initialization
Create twitter ouath handler (consumer_key, consumer_secret)
Set access token (access_token, access_token_secret)

initialize api and username
initialize list of followers_for_dm

set api key for open map weather

2. While True:



# Status update

Start at 00:00 unix time make current weather api call each 3 hours:
lookup for current weather, store data 
weather api call, parse current weather data
if error = try in 10 minutes

each 3 hours tweet: "{daytime} Сейчас {temp}, {condition}, {wind direction} {wind speed}, {weather message}"

    convert_degrees_to_direction(wind_degree)
    check_for_alerts(weather_id, wind_speed)
    choose_weather_message(weather_id, temp, wind_speed)

    if weather alert: raise tweet alert: "{daytime} {temp}, {condition}, {wind direction} {wind speed}, {weather alert}, {weather message}"
    choose_weather_alert_message(weather_id, wind_speed)

weather_alerts_message = {} #based on weather conditions
weather_messages = {} #based on weather conditions


time = datetime.datetime.utcfromtimestamp(1499933430).strftime('%H:%M:%S')

date = datetime.datetime.utcfromtimestamp(1499933430).strftime('%d.%m')

day = datetime.datetime.utcfromtimestamp(1499933430).strftime('%a') 